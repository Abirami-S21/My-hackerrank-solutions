{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Mean, median and Mode \n",
    "Problem 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "64630 11735 14216 99233 14470 4978 73429 38120 51135 67060\n",
      "43900.6\n",
      "44627.5\n",
      "4978\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy import stats\n",
    "n = int(input())\n",
    "x = list(map(int,input().split()))\n",
    "print(round(np.mean(x),1))\n",
    "print(round(np.median(x),1))\n",
    "print(int(stats.mode(x)[0])) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Weighted mean  \n",
    "Problem 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "10 40 30 50 20\n",
      "1 2 3 4 5\n",
      "32.0\n"
     ]
    }
   ],
   "source": [
    "#!/bin/python3\n",
    "\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "#\n",
    "# Complete the 'weightedMean' function below.\n",
    "#\n",
    "# The function accepts following parameters:\n",
    "#  1. INTEGER_ARRAY X\n",
    "#  2. INTEGER_ARRAY W\n",
    "#\n",
    "\n",
    "def weightedMean(X, W, n):\n",
    "    product = 0\n",
    "    Wsum = 0\n",
    "    for i in range (0,n):\n",
    "        product = product + X[i]*W[i]\n",
    "        Wsum = Wsum +W[i]\n",
    "    Wmean = product/Wsum\n",
    "    print(round(Wmean,1))\n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    n = int(input().strip())\n",
    "\n",
    "    vals = list(map(int, input().rstrip().split()))\n",
    "\n",
    "    weights = list(map(int, input().rstrip().split()))\n",
    "\n",
    "    weightedMean(vals, weights, n)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quartiles \n",
    "Problem 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "3 7 8 5 12 14 21 13 18\n",
      "6\n",
      "12\n",
      "16\n"
     ]
    }
   ],
   "source": [
    "#!/bin/python3\n",
    "\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "#\n",
    "# Complete the 'quartiles' function below.\n",
    "#\n",
    "# The function is expected to return an INTEGER_ARRAY.\n",
    "# The function accepts INTEGER_ARRAY arr as parameter.\n",
    "#\n",
    "\n",
    "def quartiles(arr,n):\n",
    "    arr.sort()\n",
    "    if n%2 == 0:\n",
    "        arr1=arr[0:(n//2)]\n",
    "        arr2=arr[(n//2):n]\n",
    "        if (n//2)%2 == 0:\n",
    "            q1=int((arr1[((n//2)//2)]+arr1[((n//2)//2)-1])/2)\n",
    "            q3=int((arr2[((n//2)//2)]+arr2[((n//2)//2)-1])/2)\n",
    "            q2=int((arr[n//2]+arr[((n//2)-1)])/2)\n",
    "            print(q1)\n",
    "            print(q2)\n",
    "            print(q3)\n",
    "        \n",
    "        else:\n",
    "            q2=int((arr[n//2]+arr[(n//2)-1])/2)\n",
    "            q1=arr1[(n//2)//2]\n",
    "            q3=arr2[(n//2)//2]\n",
    "            print(q1)\n",
    "            print(q2)\n",
    "            print(q3)\n",
    "    else:\n",
    "        arr1=arr[0:(n//2)]\n",
    "        arr2   =arr[(n//2)+1:n]\n",
    "        \n",
    "        q2=arr[n//2]\n",
    "        q1=int((arr1[((n//2)//2)]+arr1[((n//2)//2)-1])/2)\n",
    "        q3=int((arr2[((n//2)//2)]+arr2[((n//2)//2)-1])/2)\n",
    "        print(q1)\n",
    "        print(q2)\n",
    "        print(q3)\n",
    "        \n",
    "\n",
    "if __name__ == '__main__':\n",
    "    \n",
    "    n = int(input().strip())\n",
    "\n",
    "    data = list(map(int, input().rstrip().split()))\n",
    "\n",
    "    res = quartiles(data,n)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interquartile Range \n",
    "Problem 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "6 12 8 10 20 16\n",
      "5 4 3 2 1 5\n",
      "9.0\n"
     ]
    }
   ],
   "source": [
    "#!/bin/python3\n",
    "\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "#\n",
    "# Complete the 'interQuartile' function below.\n",
    "#\n",
    "# The function accepts following parameters:\n",
    "#  1. INTEGER_ARRAY values\n",
    "#  2. INTEGER_ARRAY freqs\n",
    "#\n",
    "\n",
    "def interQuartile(val, freq):\n",
    "    # Print your answer to 1 decimal place within this function\n",
    "    arr=[]\n",
    "    for i in range(0,len(freq)):\n",
    "        for j in range(0, freq[i]):\n",
    "            arr.append(val[i])\n",
    "    arr.sort()    \n",
    "\n",
    "    n = len(arr)\n",
    "#calculate\n",
    "    if n%2 == 0:\n",
    "        arr1=arr[0:(n//2)]\n",
    "        arr2=arr[(n//2):n]\n",
    "   \n",
    "        if (n//2)%2 == 0:\n",
    "            q1=round(((arr1[((n//2)//2)]+arr1[((n//2)//2)-1])/2),1)\n",
    "            q3=round(((arr2[((n//2)//2)]+arr2[((n//2)//2)-1])/2),1)\n",
    "            iq= round(float(q3-q1),1)\n",
    "            print(iq)\n",
    "        \n",
    "        else:\n",
    "        \n",
    "            q1=round(arr1[(n//2)//2],1)\n",
    "            q3=round(arr2[(n//2)//2],1)\n",
    "       \n",
    "            iq = round(float(q3-q1),1)\n",
    "            print(iq)\n",
    "    else:\n",
    "        arr1=arr[0:(n//2)]\n",
    "        arr2=arr[(n//2)+1:n]\n",
    "\n",
    "    \n",
    "        if (n//2)%2 == 0:\n",
    "            q1=round(((arr1[((n//2)//2)]+arr1[((n//2)//2)-1])/2),1)\n",
    "            q3=round(((arr2[((n//2)//2)]+arr2[((n//2)//2)-1])/2),1)\n",
    "            iq= round(float(q3-q1),1)\n",
    "            print(iq)\n",
    "        \n",
    "        else:\n",
    "        \n",
    "            q1=round(arr1[(n//2)//2],1)\n",
    "            q3=round(arr2[(n//2)//2],1)\n",
    "            iq = round(float(q3-q1),1)\n",
    "            print(iq)\n",
    "if __name__ == '__main__':\n",
    "    n = int(input().strip())\n",
    "\n",
    "    val = list(map(int, input().rstrip().split()))\n",
    "\n",
    "    freq = list(map(int, input().rstrip().split()))\n",
    "\n",
    "    interQuartile(val, freq)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Standard Deviation\n",
    "    Problem 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "10 40 30 50 20\n",
      "14.1\n"
     ]
    }
   ],
   "source": [
    "#!/bin/python3\n",
    "\n",
    "import math\n",
    "import os\n",
    "import random\n",
    "import re\n",
    "import sys\n",
    "\n",
    "#\n",
    "# Complete the 'stdDev' function below.\n",
    "#\n",
    "# The function accepts INTEGER_ARRAY arr as parameter.\n",
    "#\n",
    "\n",
    "def stdDev(arr):\n",
    "    # Print your answers to 1 decimal place within this function\n",
    "    summ =0\n",
    "    for i in range(0,n):\n",
    "        summ = summ + arr[i]\n",
    "    mean = summ / n\n",
    "    total = 0\n",
    "    for i in range(0,n):\n",
    "        total = total + ((arr[i] - mean)**2)\n",
    "    print(round(math.sqrt(total/n),1))\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    n = int(input().strip())\n",
    "\n",
    "    vals = list(map(int, input().rstrip().split()))\n",
    "\n",
    "    stdDev(vals)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Binomial Distribution Problem 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.09 1\n",
      "0.696\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "boy, girl = list(map(float, input().rstrip().split()))\n",
    "prob = 0\n",
    "for i in range(3,7):\n",
    "    prob = prob + ((math.factorial(6)/(math.factorial(i)*math.factorial(6-i)))*((boy/(boy+girl))**i)*((girl/(boy+girl))**(6-i)))\n",
    "print(round(prob,3))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Binomial distribution Problem 7\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 10\n",
      "0.891\n",
      "0.342\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "reject, total = list(map(int, input().rstrip().split()))\n",
    "rejper = reject/100\n",
    "other = 1- rejper\n",
    "no = 2\n",
    "\n",
    "probnomore = 0\n",
    "for i in range(0, no+1):\n",
    "    probnomore = probnomore + ((math.factorial(total)/(math.factorial(i)*math.factorial(total-i)))*((rejper/(rejper+other))**i)*((other/(rejper+other))**(total-i)))\n",
    "print(round(probnomore,3))\n",
    "\n",
    "prob = 0\n",
    "for i in range(no, total+1):\n",
    "    prob = prob + ((math.factorial(total)/(math.factorial(i)*math.factorial(total-i)))*((rejper/(rejper+other))**i)*((other/(rejper+other))**(total-i)))\n",
    "print(round(prob,3))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Geometric distribution Problem 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3\n",
      "5\n",
      "0.066\n"
     ]
    }
   ],
   "source": [
    "num, dem =list(map(int, input().rstrip().split()))\n",
    "n = int(input())\n",
    "p = num/dem\n",
    "q= 1-p\n",
    "geo = ((q)**(n-1))*p\n",
    "print(round(geo,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Geometric distribution Problem 9\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3\n",
      "5\n",
      "0.868\n"
     ]
    }
   ],
   "source": [
    "num, dem =list(map(int, input().rstrip().split()))\n",
    "n = int(input())\n",
    "p = num/dem\n",
    "q= 1-p\n",
    "geo = 1- q**n\n",
    "\n",
    "print(round(geo,3))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Poisson distribution Problem 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.5\n",
      "5\n",
      "0.067\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "lamb = float(input())\n",
    "k = int(input())\n",
    "Poisson = ((lamb**k)*(math.exp(-lamb)))/math.factorial(k)\n",
    "print(round(Poisson,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Poisson Distribution Problem 11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.88 1.55\n",
      "226.176\n",
      "286.1\n"
     ]
    }
   ],
   "source": [
    "a,b = list(map(float, input().rstrip().split()))\n",
    "ea = 160 + 40* (a + (a)**2)\n",
    "eb = 128 + 40* (b + (b)**2)\n",
    "print(round(ea,3))\n",
    "print(round(eb,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normal distribution Problem 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 2\n",
      "19.5\n",
      "20 22\n",
      "0.401\n",
      "0.341\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "mean, std = list(map(float, input().rstrip().split()))\n",
    "less = float(input())\n",
    "hr1, hr2 = list(map(float, input().rstrip().split()))\n",
    "ans1 = (1/2)*(1+ math.erf((less - mean)/(std * (2)**(1/2))))\n",
    "\n",
    "ans2 = ((1/2)*(1+ math.erf((hr2 - mean)/(std * (2)**(1/2))))) - ((1/2)*(1+ math.erf((hr1 - mean)/(std * (2)**(1/2)))))\n",
    "\n",
    "print(round(ans1,3))\n",
    "print(round(ans2,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normal Distribution Problem 13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70 10\n",
      "80\n",
      "60\n",
      "15.87\n",
      "84.13\n",
      "15.87\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "mean, std = list(map(float, input().rstrip().split()))\n",
    "gr1 = float(input())\n",
    "gr2 = float(input())\n",
    "\n",
    "ans1 = 1 - ((1/2)*(1+ math.erf((gr1 - mean)/(std * (2)**(1/2)))))\n",
    "\n",
    "ans2 = 1 - ((1/2)*(1+ math.erf((gr2 - mean)/(std * (2)**(1/2)))))\n",
    "\n",
    "\n",
    "ans3 = (1/2)*(1+ math.erf((gr2 - mean)/(std * (2)**(1/2))))\n",
    "print(round(ans1 * 100,2))\n",
    "print(round(ans2 * 100,2))\n",
    "print(round(ans3 * 100,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The central limit theorem Problem 14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9800\n",
      "49\n",
      "205\n",
      "15\n",
      "0.0098\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "weight = float(input())\n",
    "n = float(input())\n",
    "mean = float(input())\n",
    "std  = float(input())\n",
    "newmean = n*mean\n",
    "newstd = (n**(1/2)) * std\n",
    "ans = (1/2)*(1+ math.erf((weight - newmean)/(newstd * (2)**(1/2))))\n",
    "print(round(ans,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The central limit theorem Problem 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "250\n",
      "100\n",
      "2.4\n",
      "2.0\n",
      "0.6915\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "tickets = int(input())\n",
    "n = int(input())\n",
    "mean = float(input())\n",
    "std  = float(input())\n",
    "newmean = n*mean\n",
    "newstd = (n**(1/2)) * std\n",
    "ans = (1/2)*(1+ math.erf((tickets - newmean)/(newstd * (2)**(1/2))))\n",
    "print(round(ans,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The central limit theorem Problem 16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n",
      "500\n",
      "80\n",
      "0.95\n",
      "1.96\n",
      "484.32\n",
      "515.68\n"
     ]
    }
   ],
   "source": [
    "import math as m\n",
    "\n",
    "n = int(input())\n",
    "mean = int(input())\n",
    "std = int(input())\n",
    "interval = float(input())\n",
    "z = float(input())\n",
    "print(round(mean - (std / m.sqrt(n)) * z, 2))\n",
    "print(round(mean + (std / m.sqrt(n)) * z, 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pearson correlation coefficient Problem 17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "10 9.8 8 7.8 7.7 7 6 5 4 2 \n",
      "200 44 32 24 22 17 15 12 8 4\n",
      "0.612\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "n = int(input())\n",
    "x = list(map(float, input().rstrip().split()))\n",
    "y = list(map(float, input().rstrip().split()))\n",
    "\n",
    "meanx = sum(x)/n\n",
    "varx = sum(pow((i-meanx),2) for i in x)/n\n",
    "sdx = math.sqrt(varx)\n",
    "\n",
    "\n",
    "meany = sum(y)/n\n",
    "vary = sum(pow(i-meany,2) for i in y)/n\n",
    "sdy = math.sqrt(vary)\n",
    "\n",
    "\n",
    "nr = sum([(x[i] - meanx)*(y[i] - meany) for i in range(n)])\n",
    "dr =n*sdx*sdy\n",
    "\n",
    "pcc = nr/dr\n",
    "\n",
    "print(round(pcc,3))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Spearman's rank correlation coefficient Problem 18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "10 9.8 8 7.8 7.7 1.7 6 5 1.4 2 \n",
      "200 44 32 24 22 17 15 12 8 4\n",
      "0.903\n"
     ]
    }
   ],
   "source": [
    "n = int(input())\n",
    "X = list(map(float,input().strip().split()))\n",
    "Y = list(map(float,input().strip().split()))\n",
    "Xdash = X.copy()\n",
    "Ydash = Y.copy()\n",
    "\n",
    "\n",
    "no = list(range(1, n+1))\n",
    "rx = dict(zip(sorted(Xdash), no))\n",
    "ry = dict(zip(sorted(Ydash),no))\n",
    "\n",
    "\n",
    "q = []\n",
    "w = []\n",
    "di = []\n",
    "disq = []\n",
    "for i in range(0, n):\n",
    "    if X[i] in rx.keys():\n",
    "        q.append(rx.get(X[i]))\n",
    "    if Y[i] in ry.keys():\n",
    "        w.append(ry.get(Y[i]))\n",
    "for i in range(0,n):\n",
    "    di.append(q[i]-w[i])\n",
    "for i in range(0,n):\n",
    "    disq.append(pow(di[i],2))\n",
    "\n",
    "num = 6*sum(disq)\n",
    "den = n*(pow(n,2)-1)\n",
    "    \n",
    "spearman = 1 - (num/den)\n",
    "print(round(spearman,3))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Least square regression line problem 19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95 85\n",
      "85 95\n",
      "80 70\n",
      "70 65\n",
      "60 70\n",
      "78.288\n"
     ]
    }
   ],
   "source": [
    "n = 5\n",
    "x = [None] * n\n",
    "y = [None] * n\n",
    "exy = 0\n",
    "exsq = 0\n",
    "for i in range(0,5):\n",
    "    x[i], y[i] = map(int,input().strip().split())\n",
    "    exy = exy + x[i]*y[i]\n",
    "    exsq = exsq + pow(x[i],2)\n",
    "\n",
    "a = ((n*exy) - sum(x)*sum(y))/((n*exsq)-pow(sum(x),2))\n",
    "b = (sum(y) - a*sum(x))/n\n",
    "\n",
    "#given x = 80\n",
    "xdash = 80\n",
    "y = a*xdash + b\n",
    "print(round(y,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Multiple Linear Regression\n",
    "Problem 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 7\n",
      "0.18 0.89 109.85\n",
      "1.0 0.26 155.72\n",
      "0.92 0.11 137.66\n",
      "0.07 0.37 76.17\n",
      "0.85 0.16 139.75\n",
      "0.99 0.41 162.6\n",
      "0.87 0.47 151.77\n",
      "4\n",
      "0.49 0.18\n",
      "0.57 0.83\n",
      "0.56 0.64\n",
      "0.76 0.18\n",
      "105.21\n",
      "142.67\n",
      "132.94\n",
      "129.7\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "\n",
    "def find(x,y, x_feat):\n",
    "    lm = linear_model.LinearRegression()\n",
    "    lm.fit(x, y)\n",
    "    output = lm.predict(x_feat)\n",
    "    return output\n",
    "\n",
    "def main():\n",
    "    m, n = map(int, input().strip().split())\n",
    "    x = []\n",
    "    y = []\n",
    "    x_feat = []\n",
    "    for i in range(n):\n",
    "        *feat, y_input = map(float, input().strip().split())\n",
    "        x.append(feat)\n",
    "        y.append(y_input)\n",
    "    q = int(input())\n",
    "    for i in range(q):\n",
    "        feature = list(map(float, input().strip().split()))\n",
    "        x_feat.append(feature)\n",
    "  \n",
    "    result = find(x,y, x_feat)\n",
    "    for i in result:\n",
    "        print(round(i, 2))\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
